"""
Django settings for dex_django project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-u-%*x7wh088s9(d8!wgjn5#!_c(%@h7i12cg-@8gwdsq_49s35'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Default Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'apps.intelligence',

    # Third-party
    "rest_framework",
    "channels",

    # Local apps
    "apps.core.apps.CoreConfig",
    "apps.api",
    "apps.storage.apps.StorageConfig",
    "apps.ledger",
    "apps.ws",
    "apps.discovery",
    "apps.dex",
    "apps.chains",
    "apps.strategy",
    "apps.trading",
    "apps.services",
    "apps.sim",
    "corsheaders", 
]


# Add intelligence-specific settings
INTELLIGENCE_SETTINGS = {
    'ADVANCED_RISK_ENABLED': True,
    'MEMPOOL_MONITORING_ENABLED': True,
    'CROSS_CHAIN_ANALYSIS_ENABLED': True,
    'SOCIAL_ANALYSIS_ENABLED': True,
    'CACHE_ANALYSIS_RESULTS': True,
    'CACHE_TTL_SECONDS': 300,
    'RPC_ENDPOINTS': {
        'ethereum': 'https://eth.llamarpc.com',
        'bsc': 'https://bsc-dataseed.binance.org',
        'polygon': 'https://polygon-rpc.com',
        'base': 'https://mainnet.base.org'
    }
}

ASGI_APPLICATION = 'dex_django.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# DRF minimal baseline
# DRF: pagination + permissive auth (dev)
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",  # tighten later
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 50,
    "EXCEPTION_HANDLER": "apps.api.exceptions.exception_handler",
}

# CORS for Vite dev server
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]
# allow our custom header
CORS_ALLOW_HEADERS = list({
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "origin",
    "user-agent",
    "x-api-key",      # <-- important
})
# expose trace id to the browser for debugging
CORS_EXPOSE_HEADERS = ["X-Trace-Id"]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "dex_django.middleware.ApiKeyAuthMiddleware",  
    "dex_django.middleware.ApiRequestLogMiddleware",
]

ROOT_URLCONF = 'dex_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

API_AUTH_ENABLED = os.environ.get("API_AUTH_ENABLED", "false").lower() == "true"
API_KEY = os.environ.get("API_KEY", "")  # set in environment for real use

LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO")

import os
from pathlib import Path



# --- Logging (JSON + file rotation with redaction) ---
LOG_DIR = BASE_DIR / "data" / "logs"
os.makedirs(LOG_DIR, exist_ok=True)

LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "redact_secrets": {"()": "dex_django.logging_filters.RedactSecretsFilter"}
    },
    "formatters": {
        "json": {
            "format": (
                '{"time":"%(asctime)s","level":"%(levelname)s",'
                '"logger":"%(name)s","msg":"%(message)s"}'
            )
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "json",
            "filters": ["redact_secrets"],
        },
        "apifile": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": str(LOG_DIR / "api.log"),
            "when": "D",
            "interval": 1,
            "backupCount": 14,
            "encoding": "utf-8",
            "formatter": "json",
            "filters": ["redact_secrets"],
        },
    },
    "loggers": {
        "api": {"handlers": ["console", "apifile"], "level": LOG_LEVEL, "propagate": False},
        "django.request": {"handlers": ["console", "apifile"], "level": "WARNING", "propagate": False},
    },
    "root": {"handlers": ["console"], "level": LOG_LEVEL},
}



WSGI_APPLICATION = 'dex_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
