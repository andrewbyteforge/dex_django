from __future__ import annotations

import os
from django.core.management.base import BaseCommand
from django.conf import settings


class Command(BaseCommand):
    """
    Django management command to create copy trading migration.
    """
    
    help = "Create Django migration for copy trading models"
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--name',
            type=str,
            default='add_copy_trading_models',
            help='Migration name (default: add_copy_trading_models)'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Show migration content without creating file'
        )
    
    def handle(self, *args, **options):
        migration_name = options['name']
        dry_run = options['dry_run']
        
        migration_content = self._generate_migration_content()
        
        if dry_run:
            self.stdout.write(self.style.SUCCESS("Migration content (dry run):"))
            self.stdout.write(migration_content)
            return
        
        # Create migrations directory if it doesn't exist
        migrations_dir = os.path.join(
            settings.BASE_DIR, 
            'dex_django', 'apps', 'storage', 'migrations'
        )
        os.makedirs(migrations_dir, exist_ok=True)
        
        # Find next migration number
        migration_files = [
            f for f in os.listdir(migrations_dir) 
            if f.startswith('00') and f.endswith('.py')
        ]
        
        if migration_files:
            # Get highest number
            last_num = max(int(f[:4]) for f in migration_files)
            next_num = f"{last_num + 1:04d}"
        else:
            next_num = "0001"
        
        migration_filename = f"{next_num}_{migration_name}.py"
        migration_path = os.path.join(migrations_dir, migration_filename)
        
        # Write migration file
        with open(migration_path, 'w') as f:
            f.write(migration_content)
        
        self.stdout.write(
            self.style.SUCCESS(
                f"Created migration: {migration_filename}"
            )
        )
        
        # Show next steps
        self.stdout.write("\nNext steps:")
        self.stdout.write("1. Review the migration file")
        self.stdout.write("2. Run: python manage.py migrate")
        self.stdout.write("3. Test copy trading functionality")
    
    def _generate_migration_content(self) -> str:
        """Generate Django migration content for copy trading models."""
        
        return '''# Generated by DEX Sniper Pro copy trading setup
from __future__ import annotations

import uuid
from decimal import Decimal
from django.core.validators import MinValueValidator, MaxValueValidator
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('storage', '0001_initial'),  # Adjust based on your last migration
    ]

    operations = [
        migrations.CreateModel(
            name='FollowedTrader',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('wallet_address', models.CharField(db_index=True, help_text='Ethereum/EVM wallet address to follow', max_length=64, unique=True)),
                ('trader_name', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('blacklisted', 'Blacklisted')], db_index=True, default='active', max_length=20)),
                ('copy_mode', models.CharField(choices=[('percentage', 'Percentage of Portfolio'), ('fixed_amount', 'Fixed Amount'), ('proportional', 'Proportional to Trader')], default='percentage', max_length=20)),
                ('copy_percentage', models.DecimalField(decimal_places=2, default=Decimal('5.0'), help_text='Percentage of portfolio to allocate (for percentage mode)', max_digits=5, validators=[MinValueValidator(Decimal('0.1')), MaxValueValidator(Decimal('50.0'))])),
                ('fixed_amount_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed USD amount per trade (for fixed amount mode)', max_digits=12, null=True, validators=[MinValueValidator(Decimal('10.0'))])),
                ('max_position_usd', models.DecimalField(decimal_places=2, default=Decimal('1000.0'), help_text='Maximum position size in USD', max_digits=12, validators=[MinValueValidator(Decimal('50.0'))])),
                ('max_slippage_bps', models.PositiveIntegerField(default=300, help_text='Maximum slippage in basis points', validators=[MinValueValidator(50), MaxValueValidator(1000)])),
                ('max_risk_score', models.DecimalField(decimal_places=1, default=Decimal('7.0'), help_text='Maximum risk score threshold (1.0-10.0)', max_digits=3, validators=[MinValueValidator(Decimal('1.0')), MaxValueValidator(Decimal('10.0'))])),
                ('allowed_chains', models.JSONField(default=list, help_text="List of allowed chains: ['ethereum', 'bsc', 'base', 'polygon', 'solana']")),
                ('blacklisted_tokens', models.JSONField(default=list, help_text='List of token addresses to never copy')),
                ('whitelisted_tokens', models.JSONField(default=list, help_text='List of token addresses to exclusively copy (empty = all allowed)')),
                ('copy_buy_only', models.BooleanField(default=False)),
                ('copy_sell_only', models.BooleanField(default=False)),
                ('min_trade_usd', models.DecimalField(decimal_places=2, default=Decimal('100.0'), help_text='Minimum original trade size to copy', max_digits=12)),
                ('max_trade_usd', models.DecimalField(decimal_places=2, default=Decimal('50000.0'), help_text='Maximum original trade size to copy', max_digits=12)),
                ('total_copies', models.PositiveIntegerField(default=0)),
                ('successful_copies', models.PositiveIntegerField(default=0)),
                ('total_pnl_usd', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Followed Trader',
                'verbose_name_plural': 'Followed Traders',
                'db_table': 'copy_followed_traders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CopyTradeFilter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('priority', models.PositiveIntegerField(default=100, help_text='Filter priority (lower = higher priority)')),
                ('min_liquidity_usd', models.DecimalField(decimal_places=2, default=Decimal('10000.0'), max_digits=15)),
                ('max_tax_percentage', models.DecimalField(decimal_places=2, default=Decimal('5.0'), max_digits=5)),
                ('blacklisted_tokens', models.JSONField(default=list)),
                ('whitelisted_tokens', models.JSONField(default=list)),
                ('min_trade_usd', models.DecimalField(decimal_places=2, default=Decimal('100.0'), max_digits=15)),
                ('max_trade_usd', models.DecimalField(decimal_places=2, default=Decimal('10000.0'), max_digits=15)),
                ('max_risk_score', models.DecimalField(decimal_places=1, default=Decimal('7.0'), max_digits=3)),
                ('require_verified_contract', models.BooleanField(default=True)),
                ('allowed_chains', models.JSONField(default=['ethereum', 'bsc', 'base'])),
                ('allowed_dexes', models.JSONField(default=['uniswap_v2', 'uniswap_v3', 'pancake_v2'])),
                ('min_trader_success_rate', models.DecimalField(decimal_places=2, default=Decimal('60.0'), help_text='Minimum trader success rate percentage', max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Copy Trade Filter',
                'verbose_name_plural': 'Copy Trade Filters',
                'db_table': 'copy_trade_filters',
                'ordering': ['priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CopyTrade',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('original_tx_hash', models.CharField(db_index=True, max_length=128)),
                ('original_block_number', models.BigIntegerField()),
                ('original_timestamp', models.DateTimeField()),
                ('chain', models.CharField(max_length=20)),
                ('dex_name', models.CharField(max_length=50)),
                ('token_address', models.CharField(max_length=64)),
                ('token_symbol', models.CharField(blank=True, max_length=20)),
                ('pair_address', models.CharField(blank=True, max_length=64)),
                ('original_amount_in', models.DecimalField(decimal_places=18, max_digits=38)),
                ('original_amount_out', models.DecimalField(decimal_places=18, max_digits=38)),
                ('original_amount_usd', models.DecimalField(decimal_places=2, max_digits=15)),
                ('copy_amount_usd', models.DecimalField(decimal_places=2, max_digits=15)),
                ('copy_amount_in', models.DecimalField(blank=True, decimal_places=18, max_digits=38, null=True)),
                ('copy_amount_out', models.DecimalField(blank=True, decimal_places=18, max_digits=38, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('executed', 'Executed'), ('failed', 'Failed'), ('skipped', 'Skipped')], db_index=True, default='pending', max_length=20)),
                ('copy_tx_hash', models.CharField(blank=True, max_length=128)),
                ('copy_block_number', models.BigIntegerField(blank=True, null=True)),
                ('execution_delay_seconds', models.IntegerField(blank=True, help_text='Delay between original tx and copy attempt', null=True)),
                ('realized_slippage_bps', models.IntegerField(blank=True, null=True)),
                ('gas_used', models.BigIntegerField(blank=True, null=True)),
                ('gas_price_gwei', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('total_fees_usd', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('risk_score', models.DecimalField(blank=True, decimal_places=1, help_text='Risk score from 0.0-10.0', max_digits=3, null=True)),
                ('risk_reason', models.TextField(blank=True)),
                ('pnl_usd', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('is_profitable', models.BooleanField(blank=True, null=True)),
                ('is_paper', models.BooleanField(default=False, help_text='True if this was a paper trading copy')),
                ('trace_id', models.CharField(blank=True, max_length=64)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('followed_trader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='copy_trades', to='storage.followedtrader')),
                ('ledger_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='copy_trades', to='storage.ledgerentry')),
                ('trade', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='copy_trades', to='storage.trade')),
            ],
            options={
                'verbose_name': 'Copy Trade',
                'verbose_name_plural': 'Copy Trades',
                'db_table': 'copy_trades',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='copytrade',
            index=models.Index(fields=['followed_trader', '-created_at'], name='copy_trades_followe_b8a4c8_idx'),
        ),
        migrations.AddIndex(
            model_name='copytrade',
            index=models.Index(fields=['original_tx_hash'], name='copy_trades_origina_9b2b5f_idx'),
        ),
        migrations.AddIndex(
            model_name='copytrade',
            index=models.Index(fields=['chain', 'token_address'], name='copy_trades_chain_c5b9b6_idx'),
        ),
        migrations.AddIndex(
            model_name='copytrade',
            index=models.Index(fields=['status', '-created_at'], name='copy_trades_status_b3b3a7_idx'),
        ),
        migrations.AddIndex(
            model_name='copytrade',
            index=models.Index(fields=['is_paper', '-created_at'], name='copy_trades_is_pape_7c8c7c_idx'),
        ),
    ]
'''
'''